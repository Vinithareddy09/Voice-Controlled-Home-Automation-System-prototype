import speech_recognition as sr
import pyttsx3
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.naive_bayes import MultinomialNB

# Initialize the speech recognizer and text-to-speech engine
recognizer = sr.Recognizer()
engine = pyttsx3.init()

# Define some sample commands and actions
commands = ['turn on the light', 'turn off the light', 'play music', 'stop music', 'open door', 'close door']
actions = ['Light On', 'Light Off', 'Playing Music', 'Stopping Music', 'Opening Door', 'Closing Door']


# Text-to-speech function
def speak_text(text):
    engine.say(text)
    engine.runAndWait()


# Train a simple model to classify voice commands
vectorizer = CountVectorizer()
X = vectorizer.fit_transform(commands)
model = MultinomialNB()
model.fit(X, actions)


# Function to recognize and process voice commands
def listen_and_recognize():
    with sr.Microphone() as source:
        print("Listening for a command...")
        audio = recognizer.listen(source)
        try:
            # Convert audio to text
            command_text = recognizer.recognize_google(audio).lower()
            print(f"Recognized command: {command_text}")

            # Predict the action based on the command
            command_vector = vectorizer.transform([command_text])
            predicted_action = model.predict(command_vector)[0]

            print(f"Executing action: {predicted_action}")
            speak_text(predicted_action)

            # Simulate action
            execute_action(predicted_action)

        except sr.UnknownValueError:
            print("Sorry, I could not understand the command.")
            speak_text("Sorry, I could not understand the command.")
        except sr.RequestError as e:
            print(f"Could not request results; {e}")


# Simulate the action corresponding to the recognized command
def execute_action(action):
    if action == 'Light On':
        print("Turning the light on...")
        # Add actual hardware control code here
    elif action == 'Light Off':
        print("Turning the light off...")
        # Add actual hardware control code here
    elif action == 'Playing Music':
        print("Playing music...")
        # Add actual code to play music here
    elif action == 'Stopping Music':
        print("Stopping music...")
        # Add actual code to stop music here
    elif action == 'Opening Door':
        print("Opening the door...")
        # Add actual hardware control code here
    elif action == 'Closing Door':
        print("Closing the door...")
        # Add actual hardware control code here
    else:
        print(f"No action assigned for {action}.")


# Main loop to continuously listen for voice commands
if __name__ == "__main__":
    speak_text("Welcome to the Voice Controlled Home Automation System")
    while True:
        listen_and_recognize()
